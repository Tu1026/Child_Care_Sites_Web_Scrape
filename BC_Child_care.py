# Generated by Selenium IDE
from numpy import var
# import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from webdriver_manager.chrome import ChromeDriverManager
import pandas as pd

driver = webdriver.Chrome(ChromeDriverManager().install())
driver.implicitly_wait(10)
vars = {}
centers = []
locations =[]
emails =[]
phones = []
licenses = []
hours = []
programs =  []
# Test name: Untitled
# Step # | name | target | value
# 1 | open | https://maps.gov.bc.ca/ess/hm/ccf/ | 
driver.get("https://maps.gov.bc.ca/ess/hm/ccf/")
# 2 | click | linkText=Search by Program Type | 
# time.sleep(5)
driver.find_element(By.LINK_TEXT, "Search by Program Type").click()
# 3 | click | css=.form-control > select | 
# time.sleep(5)
driver.find_element(By.CSS_SELECTOR, ".form-control > select").click()
# 4 | select | css=.form-control > select | label=Licensed Group
dropdown = driver.find_element(By.CSS_SELECTOR, ".form-control > select")
dropdown.find_element(By.XPATH, "//option[. = 'Licensed Group']").click()
# 5 | click | xpath=//fieldset/div/div[4]/div/div/table/tbody/tr/td[2]/input | 
driver.find_element(By.XPATH, "//fieldset/div/div[4]/div/div/table/tbody/tr/td[2]/input").click()
# 6 | click | css=form > .form-btns > .button:nth-child(1) | 
driver.find_element(By.CSS_SELECTOR, "form > .form-btns > .button:nth-child(1)").click()
# time.sleep(5)

# 14 | storeText | css=.bound-visible > .paging-buttons-info > span:nth-child(2) | CurrPage
vars["CurrPage"] = driver.find_element(By.CSS_SELECTOR, ".bound-visible > .paging-buttons-info > span:nth-child(2)").text
# 15 | storeText | css=.bound-visible > .paging-buttons-info > span:nth-child(4) | MaxPage
vars["MaxPage"] = driver.find_element(By.CSS_SELECTOR, ".bound-visible > .paging-buttons-info > span:nth-child(4)").text

while vars['CurrPage'] <= vars['MaxPage']:
  for i in range(1, 51):
    # 7 | click | css=.results-list .list-menu-item:nth-child(1) | 
    driver.find_element(By.CSS_SELECTOR, f".results-list .list-menu-item:nth-child({i})").click()
    time.sleep(1)
    
    centers.append(driver.find_element(By.CSS_SELECTOR, ".map-tip-title > span").text)
    
    # 8 | storeText | css=.desc-tab:nth-child(1) div:nth-child(1) | Location
    locations.append(driver.find_element(By.CSS_SELECTOR, ".desc-tab:nth-child(1) div:nth-child(1)").text)
    # 9 | storeText | css=.desc-tab:nth-child(1) div:nth-child(2) | Email
    emails.append(driver.find_element(By.CSS_SELECTOR, ".desc-tab:nth-child(1) div:nth-child(2)").text)
    # 10 | storeText | css=.desc-tab:nth-child(1) > .desc-content > div:nth-child(3) | Phone
    phones.append(driver.find_element(By.CSS_SELECTOR, ".desc-tab:nth-child(1) > .desc-content > div:nth-child(3)").text)
    # 11 | storeText | css=.desc-tab:nth-child(1) div:nth-child(4) | License
    licenses.append(driver.find_element(By.CSS_SELECTOR, ".desc-tab:nth-child(1) div:nth-child(4)").text)
    # 12 | storeText | css=.desc-tab:nth-child(1) div:nth-child(6) | Hours
    hours.append(driver.find_element(By.CSS_SELECTOR, ".desc-tab:nth-child(1) div:nth-child(6)").text)
    # 13 | storeText | css=.desc-content > div:nth-child(7) | Program
    programs.append(driver.find_element(By.CSS_SELECTOR, ".desc-content > div:nth-child(7)").text)

    # 16 | click | css=.bound-visible > .next | 
  driver.find_element(By.CSS_SELECTOR, ".bound-visible > .next").click()



pd.DataFrame({"Centers":centers, "Locations":locations, "emails":emails, "phones":phones, "licenses":licenses, "hours":hours, "programs":programs}).to_csv('results.csv')